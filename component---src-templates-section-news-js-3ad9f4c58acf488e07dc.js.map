{"version":3,"sources":["webpack:///./src/templates/section-news.js"],"names":["GET_UPDATE_ARTICLES","gql","GET_UPDATE_ARTICLES_COPY","GET_MAX_UPDATE","query","SectionNews","data","useState","news","categories","articles_categories","articlesCategories","setArticlesCategories","count","setCount","length","isBtn","setIsBtn","useQuery","pollInterval","fetchPolicy","onCompleted","event","console","log","variables","id","maxArticlesLoading","loading","maxArticlesCategory","useLazyQuery","getArticlesCategory","updatedArticlesCategory","loadDataMore","useEffect","Date","get","categories_by_pk","spinning","articles","onLoadArticles","showBtn"],"mappings":"6pCASA,IAAMA,EAAsBC,IAAH,KAenBC,EAA2BD,IAAH,KAexBE,EAAiBF,IAAH,KAcPG,EAAK,aA+GHC,UArFK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACsBC,mBAASD,EAAKE,KAAKC,WAAWC,qBAA5EC,EADwB,KACJC,EADI,OAEJL,mBAAS,GAA7BM,EAFwB,KAEjBC,EAFiB,OAGJP,mBAASI,EAAmBI,OAAS,GAAzDC,EAHwB,KAGjBC,EAHiB,OAKmCC,YAASf,EAAgB,CAC1FgB,aAAc,EACdC,YAAa,eACbC,YAAa,SAAAC,GAAK,OAAIC,QAAQC,IAAI,cAAeF,IACjDG,UAAW,CACT,GAAMnB,EAAKE,KAAKC,WAAWiB,MALdC,EALe,EAKxBC,QAAmCC,EALX,EAKKvB,KALL,EAa2CwB,YAAa9B,EAAqB,CAC3GoB,YAAa,eACbK,UAAW,CACT,GAAMnB,EAAKE,KAAKC,WAAWiB,MAHvBK,EAbwB,YAaDH,EAbC,EAaDA,QAAeI,EAbd,EAaQ1B,KAO1B2B,EAAiBf,YAAShB,EAA0B,CAChEkB,YAAa,eACbK,UAAW,CACT,MAAS,EAAIZ,KAHTP,KA0BR4B,qBAAU,WACJL,IAlBD,IAAIM,KACHC,cACE9B,EACA,yEACA,wCAGH,IAAI6B,KACHC,cACEP,EACA,0EACA,uCASFE,MAGH,CAACJ,IAEJO,qBAAU,WACJF,GACFpB,EAAsBoB,EAAwBK,iBAAiB3B,uBAEhE,CAACkB,IAgBJ,OACE,kBAAC,IAAD,KACGI,GAA2BL,EAC1B,kBAAC,IAAD,CAAMW,UAAU,IAEhB,kBAAC,IAAD,CAAcC,SAAU5B,EAAoB6B,eAnB7B,WACnBjB,QAAQC,IAAIS,GACRA,IACFrB,EAAsBqB,EAAaM,UACnCzB,EAASD,EAAQ,GAEboB,EAAaM,SAASxB,OAAS,GAAM,GACvCE,GAAS,KAYiEwB,QAASzB","file":"component---src-templates-section-news-js-3ad9f4c58acf488e07dc.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { graphql } from \"gatsby\"\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useLazyQuery  } from \"@apollo/react-hooks\";\r\nimport Layout from \"../components/layout\"\r\nimport { get } from 'lodash'\r\nimport ArticlesList from \"../components/ArticlesList\"\r\nimport { Spin } from \"antd\"\r\n\r\nconst GET_UPDATE_ARTICLES = gql`\r\n  query ($id: Int!) {\r\n    categories_by_pk(id: $id) {\r\n      articles_categories(limit: 8, order_by: {updated_at: desc}) {\r\n        article {\r\n          id\r\n          title\r\n          teaser\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst GET_UPDATE_ARTICLES_COPY = gql`\r\n  query ($id: Int!, $limit: Int!) {\r\n    categories_by_pk(id: $id) {\r\n      articles_categories(limit: $limit, order_by: {updated_at: desc}) {\r\n        article {\r\n          id\r\n          title\r\n          teaser\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst GET_MAX_UPDATE = gql`\r\n  query ($id: Int!) {\r\n    categories_by_pk(id: $id) {\r\n      articles_categories_aggregate {\r\n        aggregate {\r\n          max {\r\n            updated_at\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const query =  graphql`\r\n  query ($id: Int!) {\r\n    news {\r\n      categories: categories_by_pk(id: $id) {\r\n        id\r\n        articles_categories(limit: 8, order_by: {updated_at: desc}) {\r\n          updated_at\r\n          article {\r\n            id\r\n            title\r\n            teaser\r\n            slug\r\n          }\r\n        }\r\n        articles_categories_aggregate {\r\n          aggregate {\r\n            max {\r\n              updated_at\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst SectionNews = ({ data }) => {\r\n  const [ articlesCategories, setArticlesCategories ] = useState(data.news.categories.articles_categories)\r\n  const [ count, setCount ] = useState(4)\r\n  const [ isBtn, setIsBtn ] = useState(articlesCategories.length > 7)\r\n\r\n  const { loading: maxArticlesLoading, data: maxArticlesCategory } = useQuery(GET_MAX_UPDATE, {\r\n    pollInterval: 0,\r\n    fetchPolicy: \"network-only\",\r\n    onCompleted: event => console.log(\"onCompleted\", event),\r\n    variables: {\r\n      \"id\": data.news.categories.id\r\n    }\r\n  })\r\n  const [ getArticlesCategory, { loading, data: updatedArticlesCategory }] = useLazyQuery(GET_UPDATE_ARTICLES, {\r\n    fetchPolicy: \"network-only\",\r\n    variables: {\r\n      \"id\": data.news.categories.id\r\n    }\r\n  })\r\n\r\n  const { data: loadDataMore } = useQuery(GET_UPDATE_ARTICLES_COPY, {\r\n    fetchPolicy: \"network-only\",\r\n    variables: {\r\n      \"limit\": 8 + count \r\n    },\r\n  })\r\n\r\n  const needReload = () => {\r\n    return (\r\n      +new Date(\r\n        get(\r\n          data,\r\n          'news.categories.articles_categories_aggregate.aggregate.max.updated_at',\r\n          'Mon Jun 08 2020 23:32:40 GMT+0300'\r\n        )\r\n      ) !==\r\n      +new Date(\r\n        get(\r\n          maxArticlesCategory,\r\n          'categories_by_pk.articles_categories_aggregate.aggregate.max.updated_at',\r\n          'Mon Jun 08 2020 23:32:40 GMT+0300'\r\n        )\r\n      )\r\n    )\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (maxArticlesCategory) {\r\n      if (needReload()) {\r\n        getArticlesCategory()\r\n      }\r\n    }\r\n  }, [maxArticlesLoading])\r\n  \r\n  useEffect(() => {\r\n    if (updatedArticlesCategory) {\r\n      setArticlesCategories(updatedArticlesCategory.categories_by_pk.articles_categories)\r\n    }\r\n  }, [loading])\r\n\r\n  const loadArticles = () => {\r\n    console.log(loadDataMore)\r\n    if (loadDataMore) {\r\n      setArticlesCategories(loadDataMore.articles)\r\n      setCount(count + 4)\r\n\r\n      if (loadDataMore.articles.length % 4 !== 0) {\r\n        setIsBtn(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <Layout>\r\n      {updatedArticlesCategory || maxArticlesLoading ? (\r\n        <Spin spinning={true} />\r\n      ) : (\r\n        <ArticlesList articles={articlesCategories} onLoadArticles={loadArticles} showBtn={isBtn} />\r\n      )}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default SectionNews;\r\n"],"sourceRoot":""}