{"version":3,"sources":["webpack:///./src/templates/section-news.js"],"names":["GET_UPDATE_ARTICLES","gql","GET_MAX_UPDATE","query","SectionNews","data","useState","news","categories","articles_categories","articlesCategories","setArticlesCategories","useQuery","variables","id","maxArticlesLoading","loading","maxArticlesCategory","useLazyQuery","getArticlesCategory","updatedArticlesCategory","Meta","Card","useEffect","needReload","categories_by_pk","Date","get","gutter","map","el","className","xs","md","lg","xl","key","article","hoverable","cover","alt","src","to","slug","title","description","teaser"],"mappings":"02BAQA,IAAMA,EAAsBC,IAAH,KAenBC,EAAiBD,IAAH,KAcPE,EAAK,aAoFHC,UA1DK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACsBC,mBAASD,EAAKE,KAAKC,WAAWC,qBAA5EC,EADwB,KACJC,EADI,OAEmCC,YAASV,EAAgB,CAC1FW,UAAW,CACT,GAAMR,EAAKE,KAAKC,WAAWM,MAFdC,EAFe,EAExBC,QAAmCC,EAFX,EAEKZ,KAFL,EAO2Ca,YAAalB,EAAqB,CAC3Ga,UAAW,CACT,GAAMR,EAAKE,KAAKC,WAAWM,MAFvBK,EAPwB,YAODH,EAPC,EAODA,QAAeI,EAPd,EAOQf,KAKhCgB,EAASC,IAATD,KAERE,qBAAU,WACJN,GACEO,KACFL,MAGH,CAACJ,IAEJQ,qBAAU,WACJH,GACFT,EAAsBS,EAAwBK,iBAAiBhB,uBAEhE,CAACO,IAEJ,IAAMQ,EAAa,kBAAO,IAAIE,KAAKC,cAAItB,EAAM,yEAA0E,wCAA2C,IAAIqB,KAAKC,cAAIV,EAAqB,0EAA2E,uCAE/Q,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKW,OAAQ,CAAC,GAAI,KAEdlB,EAAmBmB,KAAI,SAAAC,GAAE,OACvB,kBAAC,IAAD,CAAKC,UAAU,aAAaC,GAAI,GAAIC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,IAAKN,EAAGO,QAAQvB,IACxE,kBAAC,IAAD,CACEwB,WAAS,EACTC,MAAO,yBAAKC,IAAI,UAAUC,IAAI,gEAE9B,kBAAC,IAAD,CAAMC,GAAE,IAAMZ,EAAGO,QAAQM,MAASb,EAAGO,QAAQO,OAC7C,kBAACvB,EAAD,CAAMwB,YAAaf,EAAGO,QAAQS","file":"component---src-templates-section-news-js-a0c3fb1a78bb7c12ff5e.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { graphql, Link } from \"gatsby\"\r\nimport gql from 'graphql-tag'\r\nimport { useQuery, useLazyQuery  } from \"@apollo/react-hooks\";\r\nimport Layout from \"../components/layout\"\r\nimport { Card, Row, Col, Button } from 'antd';\r\nimport { get } from 'lodash'\r\n\r\nconst GET_UPDATE_ARTICLES = gql`\r\n  query ($id: Int!) {\r\n    categories_by_pk(id: $id) {\r\n      articles_categories(order_by: {updated_at: desc}) {\r\n        article {\r\n          id\r\n          title\r\n          teaser\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst GET_MAX_UPDATE = gql`\r\n  query ($id: Int!) {\r\n    categories_by_pk(id: $id) {\r\n      articles_categories_aggregate {\r\n        aggregate {\r\n          max {\r\n            updated_at\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const query =  graphql`\r\n  query ($id: Int!) {\r\n    news {\r\n      categories: categories_by_pk(id: $id) {\r\n        id\r\n        articles_categories(order_by: {updated_at: desc}) {\r\n          updated_at\r\n          article {\r\n            id\r\n            title\r\n            teaser\r\n            slug\r\n          }\r\n        }\r\n        articles_categories_aggregate {\r\n          aggregate {\r\n            max {\r\n              updated_at\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst SectionNews = ({ data }) => {\r\n  const [ articlesCategories, setArticlesCategories ] = useState(data.news.categories.articles_categories)\r\n  const { loading: maxArticlesLoading, data: maxArticlesCategory } = useQuery(GET_MAX_UPDATE, {\r\n    variables: {\r\n      \"id\": data.news.categories.id\r\n    }\r\n  })\r\n  const [ getArticlesCategory, { loading, data: updatedArticlesCategory }] = useLazyQuery(GET_UPDATE_ARTICLES, {\r\n    variables: {\r\n      \"id\": data.news.categories.id\r\n    }\r\n  })\r\n  const { Meta } = Card;\r\n\r\n  useEffect(() => {\r\n    if (maxArticlesCategory) {\r\n      if (needReload()) {\r\n        getArticlesCategory()\r\n      }\r\n    }\r\n  }, [maxArticlesLoading])\r\n  \r\n  useEffect(() => {\r\n    if (updatedArticlesCategory) {\r\n      setArticlesCategories(updatedArticlesCategory.categories_by_pk.articles_categories)\r\n    }\r\n  }, [loading])\r\n\r\n  const needReload = () => +new Date(get(data, 'news.categories.articles_categories_aggregate.aggregate.max.updated_at', 'Mon Jun 08 2020 23:32:40 GMT+0300')) !== +new Date(get(maxArticlesCategory, 'categories_by_pk.articles_categories_aggregate.aggregate.max.updated_at', 'Mon Jun 08 2020 23:32:40 GMT+0300'))\r\n\r\n  return (\r\n    <Layout>\r\n      <Row gutter={[16, 24]}>\r\n        {\r\n          articlesCategories.map(el => (\r\n            <Col className=\"gutter-row\" xs={24} md={12} lg={8} xl={6} key={el.article.id}>\r\n              <Card\r\n                hoverable\r\n                cover={<img alt=\"example\" src=\"https://os.alipayobjects.com/rmsportal/QBnOOoLaAfKPirc.png\"/>}\r\n              >\r\n                <Link to={`/${el.article.slug}`}>{el.article.title}</Link>\r\n                <Meta description={el.article.teaser} />\r\n              </Card>\r\n            </Col>\r\n          ))\r\n        }\r\n      </Row>\r\n      {/* <Row>\r\n        <Col className=\"gutter-row\" xs={24} style={{ textAlign: 'center' }}>\r\n          {\r\n            articles_categories.length > countArticles ? <Button onClick={onLoad} type=\"primary\">Загрузить ещё</Button> : null\r\n          }\r\n        </Col>\r\n      </Row> */}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default SectionNews;\r\n"],"sourceRoot":""}