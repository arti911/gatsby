{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///(webpack)/buildin/module.js","webpack:///./node_modules/@apollo/react-hooks/lib/react-hooks.esm.js"],"names":["$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","this","arguments","length","undefined","module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","OperationData","options","context","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","unmount","refreshClient","client","isNew","cleanup","verifyDocumentType","document","type","operation","QueryData","_super","_a","onNewData","_this","call","previousData","currentObservable","runLazy","runLazyQuery","lazyOptions","getExecuteResult","result","getQueryResult","startQuerySubscription","obsRefetch","variables","query","refetch","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","execute","skip","removeQuerySubscription","updateObservableQuery","getExecuteSsrResult","executeLazy","loading","networkStatus","ready","called","data","fetchData","ssr","obs","getCurrentResult","afterExecute","_b","lazy","handleErrorOrCompleted","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","observableQueryFields","addQueryPromise","prepareObservableQueryOptions","Query","displayName","fetchPolicy","metadata","reactComponent","initializeObservableQuery","getSSRObservable","observableQueryOptions","watchQuery","registerSSRObservable","newObservableQueryOptions","subscription","obsQuery","subscribe","next","previousResult","error","_error","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","getLastResult","resetLastResults","assign","currentResult","partial","errors","graphQLErrors","partialRefetch","resetQueryStoreErrors","onCompleted","onError","unsubscribe","useBaseQuery","x","tick","forceUpdate","updatedOptions","queryDataRef","queryData","current","Promise","resolve","then","memoFn","key","ref","memo","value","queryResult","useQuery","useLazyQuery","MutationData","setResult","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","response","onMutationCompleted","onMutationError","mutation","Mutation","mostRecentMutationId","optimisticResponse","update","mutationContext","_c","awaitRefetchQueries","mutateOptions","mutateVariables","refetchQueries","ignoreResults","updateResult","isMostRecentMutation","useMutation","mutationDataRef","mutationData","SubscriptionData","initialize","getLoadingResult","shouldResubscribe","keys","startSubscription","endSubscription","updateCurrentData","updateError","complete","completeSubscription","onSubscriptionData","subscriptionData","onSubscriptionComplete","RenderPromises","queryPromises","Map","queryInfoTrie","observable","props","lookupQueryInfo","queryInstance","finish","seen","set","hasPromises","size","consumeAndAwaitPromises","promises","forEach","promise","push","clear","all","varMap","has","variablesString","JSON","stringify","info"],"mappings":"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","file":"4c132e958046e585d0e96dd4422cc9bd89467856-f977c2ecd7fe8c91efc9.js","sourcesContent":["'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","require(\"core-js/modules/es6.object.define-property\");\n\nmodule.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};","import \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es6.object.to-string\";\nimport \"core-js/modules/es6.object.assign\";\nimport \"core-js/modules/es6.function.bind\";\nimport { parser, operationName, DocumentType, getApolloContext } from '@apollo/react-common';\nexport { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __extends, __assign } from 'tslib';\nimport React, { useRef, useContext, useReducer, useEffect, useState } from 'react';\nimport { NetworkStatus, ApolloError } from 'apollo-client';\nimport { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\n\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n\n    this.options = newOptions;\n  };\n\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 2) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 3) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n\n  return OperationData;\n}();\n\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n\n  function QueryData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        onNewData = _a.onNewData;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.previousData = {};\n    _this.currentObservable = {};\n    _this.runLazy = false;\n\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n\n      _this.onNewData();\n    };\n\n    _this.getExecuteResult = function () {\n      var result = _this.getQueryResult();\n\n      _this.startQuerySubscription();\n\n      return result;\n    };\n\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.query.refetch(variables);\n    };\n\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.query.fetchMore(fetchMoreOptions);\n    };\n\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.query.updateQuery(mapFn);\n    };\n\n    _this.obsStartPolling = function (pollInterval) {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.startPolling(pollInterval);\n    };\n\n    _this.obsStopPolling = function () {\n      _this.currentObservable && _this.currentObservable.query && _this.currentObservable.query.stopPolling();\n    };\n\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.query.subscribeToMore(options);\n    };\n\n    _this.onNewData = onNewData;\n    return _this;\n  }\n\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n\n    var _a = this.getOptions(),\n        skip = _a.skip,\n        query = _a.query;\n\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n\n  QueryData.prototype.fetchData = function () {\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    var obs = this.currentObservable.query;\n    var currentResult = obs.getCurrentResult();\n    return currentResult.loading ? obs.result() : false;\n  };\n\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n        lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable.query;\n    delete this.previousData.result;\n  };\n\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n\n    if (this.runLazy) {\n      delete options.skip;\n    }\n\n    return options;\n  };\n\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n\n    var result;\n\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getExecuteResult) || ssrLoading;\n    }\n\n    return result;\n  };\n\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context,\n      metadata: {\n        reactComponent: {\n          displayName: displayName\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.initializeObservableQuery = function () {\n    var _a, _b;\n\n    if (this.ssrInitiated()) {\n      this.currentObservable.query = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n\n    if (!this.currentObservable.query) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable.query = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n\n      if (this.ssrInitiated()) {\n        (_b = (_a = this.context) === null || _a === void 0 ? void 0 : _a.renderPromises) === null || _b === void 0 ? void 0 : _b.registerSSRObservable(this.currentObservable.query, observableQueryOptions);\n      }\n    }\n  };\n\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable.query) {\n      this.initializeObservableQuery();\n      return;\n    }\n\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.query.setOptions(newObservableQueryOptions)[\"catch\"](function () {});\n    }\n  };\n\n  QueryData.prototype.startQuerySubscription = function () {\n    var _this = this;\n\n    if (this.currentObservable.subscription || this.getOptions().skip) return;\n    var obsQuery = this.currentObservable.query;\n    this.currentObservable.subscription = obsQuery.subscribe({\n      next: function next(_a) {\n        var loading = _a.loading,\n            networkStatus = _a.networkStatus,\n            data = _a.data;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n\n        _this.onNewData();\n      },\n      error: function error(_error) {\n        _this.resubscribeToQuery();\n\n        if (!_error.hasOwnProperty('graphQLErrors')) throw _error;\n        var previousResult = _this.previousData.result;\n\n        if (previousResult && previousResult.loading || !equal(_error, _this.previousData.error)) {\n          _this.previousData.error = _error;\n\n          _this.onNewData();\n        }\n      }\n    });\n  };\n\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var lastError = this.currentObservable.query.getLastError();\n    var lastResult = this.currentObservable.query.getLastResult();\n    this.currentObservable.query.resetLastResults();\n    this.startQuerySubscription();\n    Object.assign(this.currentObservable.query, {\n      lastError: lastError,\n      lastResult: lastResult\n    });\n  };\n\n  QueryData.prototype.getQueryResult = function () {\n    var result = this.observableQueryFields();\n    var options = this.getOptions();\n\n    if (options.skip) {\n      result = __assign(__assign({}, result), {\n        data: undefined,\n        error: undefined,\n        loading: false,\n        called: true\n      });\n    } else {\n      var currentResult = this.currentObservable.query.getCurrentResult();\n      var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n      var error = currentResult.error,\n          data = currentResult.data;\n\n      if (errors && errors.length > 0) {\n        error = new ApolloError({\n          graphQLErrors: errors\n        });\n      }\n\n      result = __assign(__assign({}, result), {\n        loading: loading,\n        networkStatus: networkStatus,\n        error: error,\n        called: true\n      });\n\n      if (loading) {\n        var previousData = this.previousData.result && this.previousData.result.data;\n        result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n      } else if (error) {\n        Object.assign(result, {\n          data: (this.currentObservable.query.getLastResult() || {}).data\n        });\n      } else {\n        var fetchPolicy = this.currentObservable.query.options.fetchPolicy;\n        var partialRefetch = options.partialRefetch;\n\n        if (partialRefetch && !data && partial && fetchPolicy !== 'cache-only') {\n          Object.assign(result, {\n            loading: true,\n            networkStatus: NetworkStatus.loading\n          });\n          result.refetch();\n          return result;\n        }\n\n        result.data = data;\n      }\n    }\n\n    result.client = this.client;\n    this.previousData.loading = this.previousData.result && this.previousData.result.loading || false;\n    this.previousData.result = result;\n    this.currentObservable.query && this.currentObservable.query.resetQueryStoreErrors();\n    return result;\n  };\n\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    var obsQuery = this.currentObservable.query;\n    if (!obsQuery || !this.previousData.result) return;\n    var _a = this.previousData.result,\n        data = _a.data,\n        loading = _a.loading,\n        error = _a.error;\n\n    if (!loading) {\n      var _b = this.getOptions(),\n          query = _b.query,\n          variables = _b.variables,\n          onCompleted = _b.onCompleted,\n          onError = _b.onError;\n\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  QueryData.prototype.observableQueryFields = function () {\n    var observable = this.currentObservable.query;\n    return {\n      variables: observable.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n\n  return QueryData;\n}(OperationData);\n\nfunction useDeepMemo(memoFn, key) {\n  var ref = useRef();\n\n  if (!ref.current || !equal(key, ref.current.key)) {\n    ref.current = {\n      key: key,\n      value: memoFn()\n    };\n  }\n\n  return ref.current.value;\n}\n\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n\n  var context = useContext(getApolloContext());\n\n  var _a = useReducer(function (x) {\n    return x + 1;\n  }, 0),\n      tick = _a[0],\n      forceUpdate = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function onNewData() {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\n\nfunction useQuery(query, options) {\n  return useBaseQuery(query, options, false);\n}\n\nfunction useLazyQuery(query, options) {\n  return useBaseQuery(query, options, true);\n}\n\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n\n  function MutationData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        result = _a.result,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n\n      _this.onMutationStart();\n\n      var mutationId = _this.generateNewMutationId();\n\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n\n        return response;\n      })[\"catch\"](function (error) {\n        _this.onMutationError(error, mutationId);\n\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    result.client = this.refreshClient().client;\n    return [this.runMutation, result];\n  };\n\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n\n  MutationData.prototype.cleanup = function () {};\n\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n        mutation = _a.mutation,\n        variables = _a.variables,\n        optimisticResponse = _a.optimisticResponse,\n        update = _a.update,\n        _b = _a.context,\n        mutationContext = _b === void 0 ? {} : _b,\n        _c = _a.awaitRefetchQueries,\n        awaitRefetchQueries = _c === void 0 ? false : _c,\n        fetchPolicy = _a.fetchPolicy;\n\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n        onCompleted = _a.onCompleted,\n        ignoreResults = _a.ignoreResults;\n\n    var data = response.data,\n        errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n\n    var callOncomplete = function callOncomplete() {\n      return onCompleted ? onCompleted(data) : null;\n    };\n\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n\n    callOncomplete();\n  };\n\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n\n    if (onError) {\n      onError(error);\n    }\n  };\n\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n\n  return MutationData;\n}(OperationData);\n\nfunction useMutation(mutation, options) {\n  var context = useContext(getApolloContext());\n\n  var _a = useState({\n    called: false,\n    loading: false\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    mutation: mutation\n  }) : {\n    mutation: mutation\n  };\n  var mutationDataRef = useRef();\n\n  function getMutationDataRef() {\n    if (!mutationDataRef.current) {\n      mutationDataRef.current = new MutationData({\n        options: updatedOptions,\n        context: context,\n        result: result,\n        setResult: setResult\n      });\n    }\n\n    return mutationDataRef.current;\n  }\n\n  var mutationData = getMutationDataRef();\n  mutationData.setOptions(updatedOptions);\n  mutationData.context = context;\n  useEffect(function () {\n    return mutationData.afterExecute();\n  });\n  return mutationData.execute(result);\n}\n\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n\n  function SubscriptionData(_a) {\n    var options = _a.options,\n        context = _a.context,\n        setResult = _a.setResult;\n\n    var _this = _super.call(this, options, context) || this;\n\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n\n    _this.initialize(options);\n\n    return _this;\n  }\n\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n\n    var currentResult = result;\n\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n\n  return SubscriptionData;\n}(OperationData);\n\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n\n  var _a = useState({\n    loading: !updatedOptions.skip,\n    error: undefined,\n    data: undefined\n  }),\n      result = _a[0],\n      setResult = _a[1];\n\n  var subscriptionDataRef = useRef();\n\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n\n    return subscriptionDataRef.current;\n  }\n\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\n\nfunction useApolloClient() {\n  var client = React.useContext(getApolloContext()).client;\n  process.env.NODE_ENV === \"production\" ? invariant(client, 1) : invariant(client, 'No Apollo Client instance can be found. Please ensure that you ' + 'have called `ApolloProvider` higher up in your tree.');\n  return client;\n}\n\nfunction makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\n\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n\n    return finish();\n  };\n\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n        variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n\n  return RenderPromises;\n}();\n\nexport { RenderPromises, useApolloClient, useLazyQuery, useMutation, useQuery, useSubscription };"],"sourceRoot":""}